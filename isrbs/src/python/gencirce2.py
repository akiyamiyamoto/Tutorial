#!/bin/env python 

# Basic example to call fortran subroutine, using cpython interface.
# See further comments below.


from ctypes import *
import math
import time

import argparse
import os

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Print beamstrahlung spectrum generated by circe2")
    parser.add_argument("-L",help="Directory of libpyISRBS.so. default=../lib/",dest="libdir", default="../lib/")
    parser.add_argument("-e",help="Center of mass energy (GeV) of generated spectrum. Default=250 GeV",
                        dest="roots", default="250.0")
    parser.add_argument("-n",help="Number of events to print out",dest="nevents", default="20")
    parser.add_argument("-c",help="Circe2 parameter file", dest="circe2_file", default="250-TDR_ws-ee.circe2")
    parser.add_argument("-d",help="Circe2 design name", dest="design", default="ILC")

    args = parser.parse_args()

    sqrts = float(args.roots)
    libdir = args.libdir
    nevents = int(args.nevents)
    circe2_file = args.circe2_file
    design = args.design
    roots = float(args.roots)

    # Load ISRBS library.
    libfile = libdir + "libpyISRBS.so"
    if not os.path.exists(libfile):
        print "Fatal error: " + libfile + " does not exist."
        exit()
    
    bslib = cdll.LoadLibrary(libfile)
    # Define argument type of libraries 
    bslib.circe2_setfile_.argtypes = [ c_char_p, c_char_p, POINTER(c_double), POINTER(c_int), c_int, c_int ]
    bslib.circe2_setseed_.argtypes = [ POINTER(c_int) ]
    bslib.circe2_genbeam_.argtypes = [ POINTER(c_double) ]
    
    # initialize circe2
    lcirce2_file = len(circe2_file)
    ldesign = len(design)
    aroots = c_double(roots)
    ierror = 0
    aierror = c_int(ierror)

#   Set circe2 file     
    bslib.circe2_setfile_( circe2_file, design, byref(aroots), byref(aierror), lcirce2_file, ldesign)
    if aierror.value != 0:
       print "Error : failed to initialize circe2 file."
       print "  circe2_file="+circe2_file
       print "  design="+design
       exit()

    iseed = int(time.time())
    aiseed = c_int(iseed)
    bslib.circe2_setseed_( byref(aiseed) )

#   Generate events
    bsene_size = c_double*2
    bsene = bsene_size()
    bsene_pointer = cast( bsene, POINTER(c_double) )
    for ievt in range(0, nevents):
        bslib.circe2_genbeam_( bsene_pointer )
        print "Evt# %d : (Ee-,Ee+)=(%g,%g) " % ( ievt, bsene[0], bsene[1] )

    print "gencirce2 has completed."


